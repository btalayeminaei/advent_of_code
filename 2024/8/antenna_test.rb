require "test/unit"
require_relative "antenna"

class TestAntenna < Test::Unit::TestCase
  def test_antinode_count
    a = AntennaMap.new([
      [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", "0", ".", ".", "."],
      [".", ".", ".", ".", ".", "0", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", "0", ".", ".", ".", "."],
      [".", ".", ".", ".", "0", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", "A", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", "A", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "A", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
    ])
    assert_equal 34, a.antinode_count

    b = AntennaMap.new([
      ["T", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", "T", ".", ".", ".", ".", ".", "."],
      [".", "T", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", ".", "."]
    ])
    assert_equal 9, b.antinode_count
  end
end

